#!/usr/bin/env python3

import argparse
import curses

bool_plcalc = False
bool_debug = False

# bcs -> basic colour separator
# converts palettes colours to 8 bit RGB
def bcs(ic):
    # ic -> input colour
    # source: https://stackoverflow.com/a/27165165 
    r_index = ((ic - 16) // 36)
    r_rgb = 55 + r_index * 40 if r_index > 0 else 0

    g_index = (((ic - 16) % 36) // 6)
    g_rgb = 55 + g_index * 40 if g_index > 0 else 0

    b_index = ((ic - 16) % 6)
    b_rgb = 55 + b_index * 40 if b_index > 0 else 0

    return [r_rgb, g_rgb, b_rgb]

# pco -> process colour
# cause gray i.e. >231 needs special treatment
# source: https://stackoverflow.com/a/27165165 
def pco(ic):
    if (ic >= 16 and ic <= 231):
        result = bcs(ic)
    elif  (ic > 231):
        temp = (ic - 232) * 10 + 8
        result = [temp, temp, temp] 

    return result

# Convert a Gamma encoded RGB to a Linear value
# iv -> input value
def cgl(iv):

    # source: https://stackoverflow.com/a/56678483
    # sRGB (computer standard) for instance requires a power curve of
    # approximately iv^2.2, though the "accurate" transform is iv/12.92 when iv
    # is less than 0.04045, or ((iv + 0.055)/1.055)^2.4 when iv is grater than
    # 0.04045
    # iv = gamma-encoded R, G, or B channel of sRGB.
    # see also: https://www.w3.org/Graphics/Color/sRGB.html
    if (iv <= 0.04045):
        result = (iv/12.92)
    else:
        result = (pow((( iv + 0.055)/1.055),2.4))
    return result

# lcalc -> luminance (Y) calculator
# luminance and Perceived lightness are NOT the same
# 8 bit sRGB = byte sRGB = brgb
def lcalc(brgb):
    tr = brgb[0]/255
    tg = brgb[1]/255
    tb = brgb[2]/255

    lum = 0.212655 * cgl(tr) + 0.715158 * cgl(tg) + 0.072187 * cgl(tb)
    return lum

# convert relative luminance to Perceived lightness
def plcalc(rlum):
    delta = 6 / 29
    if (rlum > pow(delta,3)):
        return ((pow(rlum,(1/3)) * 116) - 16);
    else:
        fot = (rlum / (3 * pow(delta, 2))) + (4/29)
        return ((fot * 116) - 16);

# cc -> colour comparator
def cc(bg_rgb, fg_rgb):

    # Caluclate luminance for fg and bg
    Y_bg = lcalc(bg_rgb)
    Y_fg = lcalc(fg_rgb)

    Y_b = 0
    Y_d = 0
    if (Y_bg >= Y_fg):
        Y_b = Y_bg
        Y_d = Y_fg
    else:
        Y_b = Y_fg
        Y_d = Y_bg

    # print(f"{Y_b} {Y_d}")
    result = (Y_b + 0.05) / (Y_d + 0.05)

    return result

def mk_rl_lst(bg_rgb, arg_crl, arg_crh):

    rl = []
    rl_fg = []
    rl_fg_rgb = []
    urll = []
    tprev = 0.0
    for index in range(16,256):
        fg = index
        fg_rgb = pco(fg)
        result = cc(bg_rgb, fg_rgb)
        # Note: WCAG 2.0 requires the visual presentation of text
        # and images of text has a contrast ratio of at least 4.5:1 
        # Source: http://www.w3.org/TR/WCAG20/#contrast-ratiodef
        # this is the lower and upper bounds for contrast ratio of
        # the colours that will be printed
        if ((arg_crl <= result) and (arg_crh >= result)):
            rl.append(result)
            rl_fg.append(fg)
            rl_fg_rgb.append(fg_rgb)
            # urll -> unsorted list of colours according to relative luminance
            # needed for debug
            urll.append((result, fg, fg_rgb))

    # rll -> list of colours according to relative luminance
    # sorted in descending order
    rll = sorted(zip(rl, rl_fg, rl_fg_rgb), reverse=True)


    return [rll, urll]

# nline -> goes to next line at column 0
def nline(stdscr):
    ypos = curses.getsyx()[0]
    stdscr.move(ypos + 1, 0)

# prll -> print relative luminance list
def prll(stdscr, rll, bg):

    _, fg_list, _ = zip(*rll)

    for fg in fg_list:

        curses.init_pair(fg, fg, bg)

        xpos = curses.getsyx()[1]
        if (xpos > ((curses.COLS//6)*6)-6):
            nline(stdscr)
        stdscr.addstr(f"{fg:3d}   ", curses.color_pair(fg))
        stdscr.refresh()
    return

# praw -> print raw
def praw(stdscr, sltp, usltp, topic):

    nline(stdscr)
    stdscr.refresh()

    stdscr.addstr(f"sorted list {topic}:")
    stdscr.refresh()

    nline(stdscr)
    stdscr.addstr(f"{sltp}")
    stdscr.refresh()

    nline(stdscr)
    stdscr.refresh()
    stdscr.addstr(f"unsorted list {topic}:")
    stdscr.refresh()
    nline(stdscr)
    stdscr.refresh()

    stdscr.addstr(f"{usltp}")
    stdscr.refresh()

    return


# ppll -> print Perceived lightness list
#def ppll(stdscr, rll, bg, bg_rgb):
#    rl_list, fg_list, fg_bg_list = zip(*rll)
#
#    Y_bg = lcalc(bg_rgb)
#    pl_list = []
#
#    for Y_fg in rl_list:
#        L_bg = plcalc(Y_bg)
#        L_fg = plcalc(Y_fg)
#
#        if (L_bg >= L_fg):
#            L_b = L_bg
#            L_d = L_fg
#        else:
#            L_b = L_fg
#            L_d = L_bg
#
#        pl = (L_b + 0.05) / (L_d + 0.05)
#        pl_list.append(pl)
#
#        stdscr.addstr(f"{pl} ")
#
#    upll = zip(pl_list, fg_list, fg_bg_list)
#    pll = sorted(zip(pl_list, fg_list, fg_bg_list), reverse=True)
#
#    pl_list, pl_fg_list, fg_bg_list = zip(*pll)
#
#    for fg in pl_fg_list:
#
#        curses.init_pair(fg, fg, bg)
#
#        xpos = curses.getsyx()[1]
#        if (xpos > ((curses.COLS//6)*6)-6):
#            nline(stdscr)
#        stdscr.addstr(f"{fg:3d}   ", curses.color_pair(fg))
#        stdscr.refresh()
#    return [pll, upll]

def cpu(stdscr, ibgc, arg_crl, arg_crh):

    try:
        int_bg = int(ibgc)
    except ValueError:
        int_bg = int(ibgc, 16)

    if ((int_bg >= 16) and (int_bg <= 255)):
        bg_rgb = pco(int_bg)
        bg = int_bg
    elif (int_bg > 255):
        r = int(ibgc[0:2], 16)
        g = int(ibgc[2:4], 16)
        b = int(ibgc[4:],  16)
        bg_rgb = [r, g, b]
        bg = -1 # the preferred colour may not be showable

    rll , urll = mk_rl_lst(bg_rgb, arg_crl, arg_crh)

    # Clear screen
    curses.use_default_colors()
    stdscr.clear()

#   curses.init_pair(1, 0, bg)
    if (-1 == bg):
        tbg = '#' + ibgc
    else:
        tbg = ibgc

    nline(stdscr)
    stdscr.refresh()

    stdscr.addstr(f"Foreground colours within 16 to 255 for background colour {tbg} within contrast ratio {arg_crl} to {arg_crh}:", curses.color_pair(0))
    nline(stdscr)

    stdscr.refresh()

    prll(stdscr, rll, bg)
    stdscr.refresh()

    if bool_debug:
        praw(stdscr, rll, urll, 'relative luminance')
        stdscr.refresh()


   #if bool_plcalc:

   #    nline(stdscr)
   #    stdscr.addstr("According to Perceived lightness:", curses.color_pair(0))
   #    stdscr.refresh()
   #    nline(stdscr)
   #    stdscr.refresh()

   #    pll, upll = ppll(stdscr, rll, bg, bg_rgb)

    pk = "not q"
    while("q" != pk):
        pk = stdscr.getkey()
    return 0


def main():

#   global bool_plcalc
    global bool_debug
    
    oc_parser = argparse.ArgumentParser(prog='oc', description='Prints suitable foreground colours for specific background colour.')
    # nargs='?' -> One argument will be consumed from the command line if
    # possible and produced as a single item. If no command-line argument is
    # present, the value from default will be produced. 
    oc_parser.add_argument('bg', action='store', type=str,
               help='Accepts Background colour input, as (16 to 255) or Hex RGB e.g. 1d1f21')
    oc_parser.add_argument('--crl', action='store', dest='arg_crl', default=4.5, type=float, metavar='crl',
               help='lower limit of contrast ratio to be used, 4.5 recommended (default)')
    oc_parser.add_argument('--crh', action='store', dest='arg_crh', default=7, type=float, metavar='crh',
            help='upper limit of contrast ratio to be used, default 7, must be grater than crl')
#   oc_parser.add_argument('--pl', action='store_true', dest='bool_plcalc',
#           help='Show colors according to Perceived lightness')
    oc_parser.add_argument('--debug', action='store_true', dest='bool_debug',
            help='Show debugging information')

    args = oc_parser.parse_args()
    bg = args.bg
    arg_crl = args.arg_crl
    arg_crh = args.arg_crh
#   bool_plcalc = args.bool_plcalc
    bool_debug = args.bool_debug

    curses.wrapper(cpu, bg, arg_crl, arg_crh)

if __name__ == "__main__":
    main()
